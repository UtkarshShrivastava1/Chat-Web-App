{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","align","id","isRequired","color","type","placeholder","onChange","e","target","bg","border","borderColor","_focus","size","width","icon","ViewOff","View","onClick","_hover","aria-label","colorScheme","isLoading","css","background","borderRadius","fontWeight","boxShadow","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","FormData","cloudName","cloudinaryUploadUrl","append","fetch","method","body","then","res","json","url","toString","catch","err","console","log","postDetails","files","style","backgroundImage","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bgGradient","w","m","borderWidth","fontSize","fontFamily","letterSpacing","textShadow","isFitted","variant","mb","px","base","md","h","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","getSenderPic","ProfileModal","useDisclosure","isOpen","onOpen","onClose","InfoOutline","isCentered","flexDir","alignItems","boxSize","src","alt","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","marginTop","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","py","Close","pl","UserListItem","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","_active","n","some","top","right","zIndex","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","as","Button","bgColor","ChevronDown","fontStyle","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b04a161.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState(\"\"); // Updated initialization\n  const [password, setPassword] = useState(\"\"); // Updated initialization\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Fields\", // Corrected typo\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing={4} align=\"stretch\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel color=\"blue.500\">Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          bg=\"white\"\n          border=\"2px\"\n          borderColor=\"gray.200\"\n          _focus={{ borderColor: \"blue.500\" }}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color=\"blue.500\">Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n            bg=\"white\"\n            border=\"2px\"\n            borderColor=\"gray.200\"\n            _focus={{ borderColor: \"blue.500\" }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <IconButton\n              icon={show ? <ViewOffIcon /> : <ViewIcon />}\n              size=\"sm\"\n              onClick={handleClick}\n              bg=\"linear-gradient(to right, #2b5876 0%, #4e4376 51%, #2b5876 100%)\"\n              color=\"white\"\n              _hover={{ bg: \"blue.600\" }}\n              aria-label={show ? \"Hide\" : \"Show\"}\n            />\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        onClick={submitHandler}\n        isLoading={loading}\n        _hover={{ bg: \"blue.600\" }}\n        css={{\n          background:\n            \"linear-gradient(to right, #2b5876 0%, #4e4376 51%, #2b5876 100%)\",\n          border: \"none\", // Optionally remove the border\n          borderRadius: \"md\", // Optionally adjust the border radius\n          color: \"white\", // Set text color to white\n          fontWeight: \"bold\", // Optionally set font weight\n          boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\", // Optionally add a subtle shadow\n        }}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { IconButton } from \"@chakra-ui/react\";\nimport { ViewIcon, ViewOffIcon } from \"@chakra-ui/icons\";\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pic, setPic] = useState(\"\");\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (!pics) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      const uploadPreset = \"ld1ennkc\";\n      const cloudName = \"dpd7aw7dv\";\n      const cloudinaryUploadUrl = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", uploadPreset);\n      data.append(\"cloud_name\", cloudName);\n\n      fetch(cloudinaryUploadUrl, {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\" align=\"stretch\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel color=\"blue.500\">Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n          bg=\"white\"\n          border=\"2px\"\n          borderColor=\"gray.200\"\n          _focus={{ borderColor: \"blue.500\" }}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel color=\"blue.500\">Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          bg=\"white\"\n          border=\"2px\"\n          borderColor=\"gray.200\"\n          _focus={{ borderColor: \"blue.500\" }}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color=\"blue.500\">Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            bg=\"white\"\n            border=\"2px\"\n            borderColor=\"gray.200\"\n            _focus={{ borderColor: \"blue.500\" }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <IconButton\n              icon={show ? <ViewOffIcon /> : <ViewIcon />}\n              size=\"sm\"\n              onClick={handleClick}\n              bg=\"linear-gradient(to right, #2b5876 0%, #4e4376 51%, #2b5876 100%)\"\n              color=\"white\"\n              _hover={{ bg: \"blue.600\" }}\n              aria-label={show ? \"Hide\" : \"Show\"}\n            />\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color=\"blue.500\">Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n            bg=\"white\"\n            border=\"2px\"\n            borderColor=\"gray.200\"\n            _focus={{ borderColor: \"blue.500\" }}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <IconButton\n              icon={show ? <ViewOffIcon /> : <ViewIcon />}\n              size=\"sm\"\n              onClick={handleClick}\n              bg=\"linear-gradient(to right, #2b5876 0%, #4e4376 51%, #2b5876 100%)\"\n              color=\"white\"\n              _hover={{ bg: \"blue.600\" }}\n              aria-label={show ? \"Hide\" : \"Show\"}\n            />\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel color=\"blue.500\">Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n          bg=\"white\"\n          border=\"2px\"\n          borderColor=\"gray.200\"\n          _focus={{ borderColor: \"blue.500\" }}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        onClick={submitHandler}\n        isLoading={picLoading}\n        _hover={{ bg: \"blue.600\" }}\n        style={{\n          backgroundImage:\n            \"linear-gradient(to right, #2b5876 0%, #4e4376 51%, #2b5876 100%)\",\n          color: \"white\", // Optionally, you can set text color\n          border: \"none\", // Optionally, you can remove border\n        }}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nfunction Homepage() {\n  const history = useHistory();\n  const gradientBg = {\n    backgroundImage: \"linear-gradient(90deg, #f0f8ff 50%, #f5f5dc 100%)\",\n  };\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bgGradient=\"linear-gradient(to right, #16222A 0%, #3A6073  51%, #16222A  100%)  \" // Gradient from dark gray to light gray\n        w=\"200%\"\n        m=\"40px 0 30px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"2px\"\n        borderColor=\"#4facfe\"\n        boxShadow=\"0px 4px 6px rgba(0, 0, 0, 0.1)\"\n      >\n        <Text\n          fontSize=\"3xl\" // Increase font size for emphasis\n          fontFamily=\"Arial, sans-serif\" // Use Arial font with fallback to sans-serif\n          fontWeight=\"bold\" // Make the text bold for emphasis\n          color=\"#f0f0f0\" // Light gray color\n          letterSpacing=\"1px\" // Add slight letter spacing for better readability\n          textShadow=\"2px 2px 4px rgba(0, 0, 0, 0.2)\" // Add a subtle text shadow for depth\n        >\n          React Chat Web Application\n        </Text>\n      </Box>\n\n      <Box\n        w=\"120%\"\n        p={4}\n        borderRadius=\"lg\"\n        borderWidth=\"10px\"\n        style={gradientBg}\n      >\n        {\" \"}\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\" px={4} fontSize={{ base: \"sm\", md: \"md\" }}>\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels h=\"auto\">\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\n\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start a chat{\" \"}\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  if (users && users.length > 0) {\n    return users[0]._id === loggedUser?._id ? users[1].name : users[0].name;\n  }\n  return \"\"; // or any default value you prefer when users array is empty\n};\n\nexport const getSenderPic = (loggedUser, users) => {\n  if (users && users.length > 0) {\n    return users[0]._id === loggedUser?._id ? users[1].pic : users[0].pic;\n  }\n  return null; // or any default value you prefer when users array is empty\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  if (users && users.length > 0) {\n    return users[0]._id === loggedUser._id ? users[1] : users[0];\n  }\n  return null; // or any default value you prefer when users array is empty\n};\n","import { InfoOutlineIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          d={{ base: \"flex\" }}\n          icon={<InfoOutlineIcon />}\n          onClick={onOpen}\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\" bgGradient=\"linear(to-r, #3A3A3A, #808080)\">\n          {\" \"}\n          {/* Dark metallic gradient */}\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n            color=\"white\" // Text color set to white\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n              color=\"white\" // Text color set to white\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  // Log the user object for debugging\n  console.log(\"User object:\", user);\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bgGradient=\"linear(to-r, #3A3A3A, #808080)\" // Dark metallic gradient\n      _hover={{\n        background: \"#38B2AC\", // Lighter color on hover\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"white\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text fontWeight=\"bold\">{user.name}</Text> {/* Bold name */}{\" \"}\n        <Text fontSize=\"xs\">\n          <b>Email: </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { InfoOutlineIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton\n        d={{ base: \"flex\" }}\n        icon={<InfoOutlineIcon />}\n        onClick={onOpen}\n      />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bgGradient=\"linear(to-r, #DDDDDD, #AAAAAA)\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      boxShadow=\"0px 4px 6px rgba(0, 0, 0, 0.1)\" // Add a subtle shadow\n      h=\"630px\" // Adjust the height here\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Type names to add users\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender, getSenderPic } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Avatar } from \"@chakra-ui/avatar\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const {\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification,\n    user,\n    chats,\n    setChats,\n  } = ChatState();\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    console.log(user._id);\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bgGradient=\"linear(to-r, #3A3A3A, #808080)\" // Gradient from dark gray to light gray\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      boxShadow=\"0px 4px 6px rgba(0, 0, 0, 0.1)\" // Add a subtle shadow\n      h=\"630px\" // Adjust the height here\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work Sans, sans-serif\" // Use Work Sans font with fallback to sans-serif\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"#FFFFFF\" // White color for better visibility on black background\n      >\n        <Text fontWeight=\"bold\">Chat List</Text> {/* Make text bold */}\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n            bgGradient=\"linear-gradient(to right, #485563 0%, #29323c  51%, #485563  100%) \" // Gradient from dark gray to light gray\n            color=\"#FFFFFF\" // White text color\n            borderRadius=\"lg\" // Rounded corners\n            px={6} // Horizontal padding\n            py={3} // Vertical padding\n            _hover={{\n              // Hover effect\n              bg: \"#6A5ACD\", // Darker purple background color on hover\n            }}\n            _active={{\n              // Active effect\n              bg: \"#483D8B\", // Even darker purple background color on click\n            }}\n            _focus={{\n              // Focus effect\n              boxShadow: \"outline\", // Add outline on focus\n            }}\n          >\n            Create Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => {\n                  setSelectedChat(chat);\n                  // Remove the chat from the list of notifications\n                  setNotification(\n                    notification.filter((n) => n.chat._id !== chat._id)\n                  );\n                }}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Box d=\"flex\" alignItems=\"center\" position=\"relative\">\n                  {/* User's profile picture */}\n                  {/* Console logs to check the name and pic */}\n\n                  <Avatar\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={getSender(loggedUser, chat.users).name}\n                    src={getSenderPic(loggedUser, chat.users)}\n                    mr={2}\n                  />\n\n                  {/* Container for user's name */}\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n\n                  {/* Notification Badge */}\n                  {notification.some((n) => n.chat._id === chat._id) && (\n                    <Box\n                      w=\"16px\"\n                      h=\"16px\"\n                      bg=\"red.500\"\n                      borderRadius=\"50%\"\n                      position=\"absolute\"\n                      top=\"-4px\"\n                      right=\"-4px\"\n                      boxShadow=\"0 0 10px rgba(255, 0, 0, 0.6)\"\n                      border={`2px solid rgba(255, 0, 0, 0.8)`}\n                      zIndex=\"1\"\n                    />\n                  )}\n                </Box>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    console.log(\"Search query:\", search); // Add this line\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(\"Search result:\", data); // Add this line\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\" // Set display to flex\n        justifyContent=\"space-between\" // Align items with space between\n        alignItems=\"center\" // Align items vertically centered\n        bgGradient=\"linear-gradient(to right, #16222A 0%, #3A6073  51%, #16222A  100%)  \" // Gradient from dark gray to light gray\n        width=\"100%\" // Set width to 100% of the parent container\n        padding=\"10px\" // Add padding around the content\n        border=\"5px solid #555\" // Add a solid border with a dark gray color\n        borderRadius=\"md\" // Apply a medium border radius for rounded corners\n        boxShadow=\"md\" // Add a medium shadow for depth\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            bgGradient=\"linear(to-r, #3A3A3A, #808080)\" // Gradient from dark gray to light gray\n            color=\"white\" // Text color\n            borderRadius=\"full\" // Apply full border radius for a rounded appearance\n            boxShadow=\"md\" // Add a medium shadow for depth\n            px={4} // Add horizontal padding for spacing\n            py={2} // Add vertical padding for spacing\n            _hover={{\n              bgGradient: \"linear(to-r, #4a4a4a, #909090)\", // Lighten the gradient on hover\n              color: \"white\", // Change text color on hover\n            }}\n          >\n            <i className=\"fas fa-search\"></i> {/* Icon */}\n            <Text d={{ base: \"none\", md: \"flex\" }} ml={2} fontWeight=\"bold\">\n              Search User\n            </Text>{\" \"}\n            {/* Text */}\n          </Button>\n        </Tooltip>\n        <Text\n          fontSize=\"3xl\" // Increase font size for emphasis\n          fontFamily=\"Arial, sans-serif\" // Use Arial font with fallback to sans-serif\n          fontWeight=\"bold\" // Make the text bold for emphasis\n          color=\"#f0f0f0\" // Light gray color\n          letterSpacing=\"1px\" // Add slight letter spacing for better readability\n          textShadow=\"2px 2px 4px rgba(0, 0, 0, 0.2)\" // Add a subtle text shadow for depth\n        >\n          React Chat Web App\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton\n              as={Button}\n              bgColor=\"transparent\"\n              color=\"white\" // Set the text color to white\n              rightIcon={<ChevronDownIcon />}\n              fontFamily=\"cursive\"\n              fontWeight=\"bold\"\n              h=\"50px\"\n              w=\"200px\"\n              _hover={{ bgColor: \"transparent\" }} // Remove white highlight on hover\n              _active={{ bgColor: \"transparent\" }} // Remove highlight on click\n              _focus={{ boxShadow: \"none\" }} // Remove outline highlight on focus\n            >\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n                mr={2}\n              />\n              <Text fontWeight=\"bold\" fontSize=\"xs\" mr={2} color=\"white\">\n                {\" \"}\n                {/* Set the text color to white */}\n                Welcome,\n              </Text>\n              <Text\n                fontWeight=\"bold\"\n                fontSize=\"sm\"\n                fontStyle=\"italic\"\n                color=\"white\"\n              >\n                {\" \"}\n                {/* Set the text color to white */}\n                {user.name}\n              </Text>\n            </MenuButton>\n\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => {\n                console.log(\"User object2:\", user); // Add this line\n                return (\n                  <UserListItem\n                    key={user._id}\n                    user={user} // Pass the entire user object\n                    handleFunction={() => accessChat(user._id)}\n                  />\n                );\n              })\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}